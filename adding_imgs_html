# Adding Images in HTML

---

## Intro

Before images the Internet was text only, which makes sense because Tim Berners-Lee created to share scientific articles with colleagues.

Images can show up on web pages in 2 ways:

1. Embedded in the inline content
2. Background images

When the image is part of the editorial content (product photos, gallery images, ads, illustrations etc) they should be embedded into the inline content. We use the `<img>` tag for that.

When an image is purely decorative (think myspace page backgrounds, header background image patterned border around an element), we should use CSS to add them to our document.

Inline elements appear in the flow of a document. In contrast to block elements that take up a full line and other elements will appear below it.

---

## Image Formats

To get an image on the web it has to be in a web supported format, such as:

- PNG
- JPG
- GIF
- WebP
- JPEG-XR

The latter two WebP and JPEG-XR are newer and not supported in all browsers.

You'll need to convert non web supported images to web supported images. For instance if you have TIFF file.

If you have to keep your image in an original non-web supported format you can make it available as an external image.

```
<a href="originalartwork.tiff">
    View the original artwork
    </a>

```

## Adding Images to a Document

To add an image to a document we use the `<img>` element.

Important things to know about the `<img>` element.

- `<img>` is self closing. You don't need to add an end tag to it.

- It is an empty tag, meaning it doesn't have any content.

- It is an inline element so it appears in the flow of text. You will need to add markup or styles that put an image on its own line like a block element.

- It is a replaced element because it is replaced by an external file when the page is displayed.

- The bottom edge of an image aligns with the baseline of text. Can change this with CSS.

- The attributes `src` and `alt` are required with the `<img>` tag.

### `<img>` Attributes

The value of the src attribute is the image's location. This can be a relative or absolute path. I like to think of src as href for images.

The value of the alt attribute is the text that describes the images. In case the images doesn't load or someone is using assistive technology the alt text will be shown or read. If an image doesn't add meaning to the text you can leave alt empty. When leaving it empty don't add a space between quotation marks. It should look like this:

`alt=""`

There are best practices for adding alt text. [WebAim has some tips for alt text best practices](https://webaim.org/techniques/alttext/)

It is common practice to put images in a specific folder usually called images or img or images. This is helpful to to search engines. Sometimes each section of a site has its own image folder.

### Tips

Think about how the alt text sounds. Break your code so that the alt text is displayed. Read it out loud to see if it ads to the experience or might be obtrusive to someone using assistive technology.

### Image Syntax

<img src="pathtoimagerelativeorabsolute" alt="description of image">

---

## Adding Dimensions

We use the width and height attributes to specify the dimensions of an image. Width and height aren't for resizing images. When we use responsive image techniques we should not use width and height attributes. The pixels used to specify width and height should be the size of the actual image to avoid distortion. It seems that when pages are not designed responsively we need to dictate to the browser how to size images.

`width="200" height=200"`

I omitted the pixel (px) suffix, it is not needed in the html.

---

## SVGs - Scalable Vector Graphics

I am not sure why they are called SVGs? Because to my knowledge all vector files are scalable. That seems like the whole point of vectors? Being able to resize them without distortion. The .svg suffix is also known as a stand alone SVG

cdInstead of a grid of pixels like with raster(bitmapped images) vectors are composed of shapes and paths that are mathematically defined.

The shapes and paths in SVGs are specified by written instructions. These instructions are written in SVG markup language, xml. Browsers that support SVGs read the xml file and follow the instructions from the file to render the SVG. Chapter 25 of Learning Web Design is dedicated to SVGs and I want to spend more time learning about SVGs.

There are 3 methods we can use add SVGs to an HTML document.

**Method 1: Embed with the `<img> element` . Like this for example:**

`<img src="pathto.svgfile" alt="description of svg file" />`

### Advantages of Embed Method

- Supported by all browsers that support SVGs

### Disadvantages of Embed Method

- Can't apply styles to to the items within the SVG with an external stylesheet. You can apply styles to the <img> tag itself. The .svg file might include its own internal style sheet by using the style element to style the elements within it.

- Can't use JavaScript to manipulate the elements within the .svg file. :hover styles (CSS) won't work either.

- Can't use any external files including embedded images or web fonts within the SVG.

**Method 2: Inline w/ HTML**

You can copy the content of a SVG file and paste it into the HTML document. You use the `<svg>` tag to do this:

`<svg></svg>`

### Advantages of Inline Method

- When you paste the SVG markup into an HTML document you can take full advantage of the SVG features because you can access the markup. The elments of the SVG are a part of the DOM (document object model) tree so the SVG can be manipulated by JavaScript, which means you can make it interactive.

### Disadvantages of Inline Method

- SVG markup can get long and complicated, pasting it into your HTML will add to the length and complicatedness of the HTML file.

- Also makes it harder to maintain images on the site, since they are squirreled away in the HTML document. You have to pilfer through a long document to find the SVG markup you want to address.

- Inline SVGs are not cached by the browser. So avoid using SVGs for larger images that are reused across HTML pages.

#### Remember [to check browser compatibility for SVG method](caniuse.com)

**Method 3: Embed with the Object Element**

The `<object>` element is used to embed various sorts of media and can be used with SVGs. It is a compromise between using the `img` element or the inline method.

The opening object tag specifies the type of media in this case imga/svg+xml (kinda like the MIME type type/subtype syntax) and points to the file that will be sued with data attribute.

The object element has its own fallback mechanism. If you have an SVG file you can add a png version of it to the object element. If the SVG isn't rendered by the browser the PNG version of the file will render instead.

Syntax:

`<object type="image/svg+xml" data="pizza.svg" 
  <img src="pizza.png" alt="pizza">
</object>
`

### Advantages

- Adding SVGs to HTML with the object element means they can be scriptied and load external files.

- They can access the parent HTML doc with some security restrictions.

### Disadvantages

- When embedding a SVG image with the object element they are separate files and not a part of the dom tree (like when embedding with the image element). As such you can't use a stylesheet win the HTML document to style the elements within the SVG. Embedded SVGs may also have some buggy behaviors in browsers. Be sure to test them thoroughly.

- Some browsers download the fallback image even if they support SVG and don't need the fallback. The work around is to make the fallback image a CSS background image with an empty div container. However this makes the image less flexible for scaling and sizing.

```
<object type="image/svg+xml" data="pizza.svg"
  <style="background-image: url(pizza.png); width 100px; height: 100px;"
  role="img" aria-label="pizza"
  >
</object>
```

---

## SVGs & CSS

You can use SCGs as background images with CSS.

---

## Technical Side of Images

Name your images with proper suffixes. In Linux this doesn't matter, but for your web page it does. Your server needs to configured to serve these various image types. All servers are configured to serve PNG, JPEG, and GIFs without an extra configuration needed. To serve SVGs for newer formats like WebP and JPEG-XR you may need to add the specific formate to the server to support.

Image files and any other media file that live on a server have an official media type also called a MIME (Multipurpose Internet Mail Extensions) type as well as a specific suffix.

We are familiar with file suffixes/extensions. We see them all the time (.docx, .pdf .html are some other examples).

Syntax for a MIME Type:

`type/subtype`

A type is the general category the document falls into like video or text for instance. Subtype identifies the exact kind of data of the specified MIME type.

---

# Responsive Images

With the introduction to different screen sizes and resolutions came the need for responsive images - images that tailored to a users environment. That environment includes things like screen sizes, resolutions, networks speed, and other criteria. By accounting for these criteria browsers are able to deliver the best version of an image for a user's environment.

When learning about responsive images I found it helpful to learn more about pixels and screen displays.

## Pixel

Pixel is short for "picture element." A pixel is the smallest unit of a digital image or display (like a computer monitor, smartphone, television, or tablet screen for example). Each pixel is a single point in an image and can be a different color. This is the physical pixel, more on that in the next section.

## CSS & Physical Pixels

There are lots of types of pixels. But, for responsive images we want to focus on physical and CSS pixels.

- Physical Pixel: They are an absolute unit. The smallest physical unit in a display. Each device pixel represents a single point of color on a screen. Each physical pixel usually has three sub pixels (red,green,and blue (RGB)).

- CSS Pixel: A unit of measurement in CSS that is used to style elements on a web page. CSS pixels are a relative unit of measurement. They are used to ensure consistent sizing across devices with different screen resolutions.

Traditionally one CSS pixel = one physical pixel.

When apple coined the term retina display in the 2010s. With the introduction of retina displays the 1:1 ratio of physical and CSS pixels changed to a 2x1 ratio (or higher). This means that one CSS pixel = four physical pixels (2x2).

## Types of Displays

When reading Learning Web Design (Robbins) she mentioned 1x, 2x, and 3x devices and I was confused by this. It turns out these have specific definitions that I understood better elsewhere.

- 1x displays: This is a standard display where one device pixel equals one CSS pixel.

- Appearance: Images and text appear at their true size and resolution. Older monitors and screens use 1x displays. An image that is 121x121px physical pixels will be 121x121px CSS pixels - a 1:1 ratio.

---

- 2x display: Often called retina displays, high resolution, or HiDPI (high dots per inch).

- Appearance: Images and text are displayed at a higher resolution making them appear sharper and more detailed. A 121x121px image will be twice the size in CSS pixels. So a 121x121px will be doubled in size and take up 442x442px on the screen.

- 3x display: Ultra high resolution.

- Appearance: Images are so crisp they sometimes hurt my eyes on television (haha). Each CSS pixel corresponds to 9 pixels, 3x3px. An image that is 121x121px will be 363x363px CSS pixels.

## Resolution

The total number of pixels displayed on a screen is called resolution. It is common for computer monitors to have a resolution of 2,073,600 px or 2 mega pixels.

### Finding Screen Resolution

To calculate a screens resolution take the number of pixels displayed horizontally and vertically and multiply the values.

For example: $$1920px \times 1080px = 2,073,600px(2 mega pixels).$$

A 1080px screen is also called full HD.

## Screen Size

Now that we understand screen resolution, we should learn about screen size, which is the physical size of a a screen. Screen size unlike many other things in life is measured diagonally instead of vertically or horizontally. I have a 24 inch monitor. I know this because I measured it horizontally.

## Aspect Ratio

Is comparison of the width and height of a screen or image. To find he aspect ratio of a screen we need to know its resolution (the number of vertical and horizontal pixels). I like to think of aspect ratio as a fraction.

$\frac{1920}{180} =$ $\frac{16}{9} =$ $16\colon9$

## Pixel Density

Pixel density is equivalent to the amount of pixels found within an inch of the screen or printed material. So it is fair to say that pixels per inch or ppi = pixel density. Pixels per centimeter (ppc) can also be used, though it is less common than ppi.

To find the ppi you measure one inch diagonally on screen then draw a line through that. The amount of pixels that line intersects gives you the pixel density or ppi.

### Calculating Pixel Density or PPI

There is an equation to find the pixel density or ppi.

$PPI=\frac{\sqrt{(\text{width}^2 + \text{height}^2)}}{\text{Diagonal Size (inches)}}$

Lets calculate the ppi of a screen that has a resolution of 1920 x 1080px that is 24 in size:

$PPI=\frac{\sqrt{(\text{1920}^2 + \text{1080}^2)}}{\text{24(inches)}}$

$PPI=\frac{\sqrt{(\text{3686400}^2 + \text{1166400}^2)}}{\text{24(inches)}}$

$PPI=\frac{\sqrt{(\text{4852800
})}}{\text{24(inches)}}$

$PPI=\frac{2202.907}{24} \approx 91.79$

So a 1920 x 1080 px screen that is 24 in has a PPI of $\approx 91.79$.

## Resolution vs Pixel Density

| Resolution                                                                                                                                                    | Pixel Density                                                                                                   |
| ------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------- |
| Total number of pixels in an image or screen. Calculated by taking the amount of pixels in the width of a screen or image by the amount pixels in the height. | How closely the pixels are packed together. Measured in pixels per inch or less commonly pixels per centimeter. |

---

# Marking-Up Responsive Images

To markup responsive images in HTML we use the `<img>` element, which as we know always takes a the `src and alt attributes `.

`<img src="url" alt"description of image" />`

We use different attributes and elements in conjunction with the `img` tag.

When thinking about responsive images it is helpful to identify and understand your use case to find a solution.

In the article [Responsive Images 101](https://cloudfour.com/thinks/responsive-images-101-definitions/) Jason Grisby provides two of the most common use cases for using responsive images.

1. **Resolution Switching** - Any scenario where we want to provide different sizes of an image and we are not modifying the images content or aspect ratio. This is the most common scenario. Resolution Switching considers either screen resolution or viewport size.

| Screen                                                                                                                          | Viewport                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |
| ------------------------------------------------------------------------------------------------------------------------------- ||
| The physical display of a device, such as a monitor, smartphone, or tablet. The screen's size is measured diagonally in inches. | The visible area of a web page on a user's screen. It is the portion of the page that is currently viewable and can vary in size depending on device or browser window. In web development, the viewport refers to the area of the browser window that displays a website. It can vary depending on the device and the browser window size. The viewport size is crucial in responsive web design because it determines how content should be scaled and arranged for optimal viewing. On a mobile devices the viewport is the whole screen.On a desktop browser the viewport is the area where a web page is displayed.Items like scroll bars, tool bars, address bar, tabs, menu buttons, status bars, and bookmark bars are considered the web browsers chrome. |

The viewport is especially important in responsive design because it helps developers create websites that work well on different devices by using CSS media queries and other techniques to adapt the layout based on the viewport size. This way, a website can provide a good user experience regardless of whether it's viewed on a large desktop monitor or a small smartphone screen.

2. **Art Direction** - Any time we need to change the content or aspect ratio of an image based on the size of an image on a page.

## Resolution Switching

When our use case is resolution switching we employ the `srcset` attribute.

### Src Attribute Syntax

In HTML the `srcset` attribute is used to specify different image sizes and resolutions, which allow us to use responsive images.

The value of `srcset` is a comma separated list of options.

Each option has two parts:

1. Image URL

2. A descriptor (either an x or w descriptors)

The first part is self explanatory, given that we understand how the `src` attribute of the `<img>` element works.

## X & W Descriptors

The descriptors are either x or w descriptors. Let's talk about x-descriptors first.

## x-descriptors

- x-descriptors: Specifies the target devices [pixel density](#pixel-density) of an image. x descriptors tell the browser to select an image based on a screen's resolution. It doesn't consider the dimensions of the screen or viewport. Because of x-descriptors focus on screen resolution it is best used with fixed width images (logos, social media badges and headers, and thumbnails and icons).

### Srcset w/ x-descriptor

```
<img src="default.jpg" alt="image description"
      srcset="image1.jpg 2x,
             image2.jpg 3x" />
```

In the sample above `srcset` has 2 items in its comma separated list.

Let's break down each item.

1. image1.jpg 2x` When the resolution of a screen is 2x
   then this image will be used.

2. `image2.jpg 3x` When the screen's resolution is 3x this image will be used.

Browsers that recognize `srcset` check the screens resolution and download the image they think will work best. When we use `srcset` with `<img>` we are giving the browser control over image selection.

Note the usage of the `src`attribute, which again, is required. The`src`attribute usually specifies the default 1x image.

For browsers that do not support`srcset`the value of `src` is the fallback.

## w-descriptors

W-descriptors allow for images to change based on size of the browser viewport.

## Srcset to w-descriptors

Again we use the `<img>` element, with the `srcset` (like we do with x-descriptors).As its name indicates, a w-descriptor provides the pixel width of each image, which comes after the image url. In addition to `srcset` we also use the `sizes` attribute.

`srcset="doggo_480.jpg 480w,
        doggo_960.jpg 960w,
        doggo_1280.jpg 1280w,
        doggo_2400.jpg 2400w"`

`srcset` has 4 list items. The first image has a width of 480px the second 960px, the third 1280px and the last 2400px.

## Sizes Attribute

The `sizes` attribute tells the web browser how much of the viewport the image will take up. It is important for sizes browser the approximate size of the images because when a browser downloads the HTML doc for website the first thing it does scan the document in order to establish its outline structure (Document Object Model (DOM)). Right after the browser pre-loader grabs all the images from the server so they are ready to go. Finally the browser downloads the CSS and JavaScript. The CSS file probably has instructions about the layout of images, but the images are downloaded before these instructions. So we give the browser a good hint with the `sizes` attribute about how much space images will take up. This way the preloader can select the correct image from the `srcset` list.

In the simplest scenario we would have an image like a banner that always appears at 100% regardless of device.

```
<img src="doggos_640.jpg"
  alt="image of a dog"
  srcset="doggo_480.jpg 480w,
        doggo_960.jpg 960w,
        doggo_1280.jpg 1280w,
        doggo_2400.jpg 2400w"
  sizes="100vw"/>

```

`sizes` tells the browser that the image it selects should take up 100% of the viewport. `vw` stands for viewport width and it is the most common unit used with the sizes attribute. There are other units that can be used like px, ems, viewport height (vw) and others. Percentages are invalid.

- 100vw = 100%
- 75vw = 75%
- 50vw = 50%

Sizing an image to fill the entire width of a browser is a specific case. More commonly images will be one aspect of a responsive page layout. Images within the context of page with many other elements will need resize and rearrange to best suit the available screen width.

In the scenarios where an image is a component of a page that needs to respond to the available screen width we use the `sizes` attribute to tell the browser how the image should be resized based on a screen's width. In these cases the `sizes` attribute becomes a comma separated list (like `srcset`). Each list item has two parts.

1. Media Condition: a condition that determines when a particular length should be used (which has two dependent values the media feature and the media feature's value). The media condition is wrapped in parenthesis ().
2. Length: indicates the width an image will occupy in the layout if the media condition is met.

## Media Condition Parts

1. **Media Feature**: A characteristic the device or viewport that the browser testes in order to apply a particularly sized image to the layout. With the `sizes` attribute the media feature values can be:

- max-width
- min-width
- max-height
- min height
- orientation: determines if the device is in portrait or landscape. In short orientation can have two values either portrait or landscape.
- aspect-ratio: width:height ratio of screen for instance 16:9.

2. **Value**: The value (some sort of of unit like px) of the media feature.

The media feature and its value are dependent on each other.

`(max-width: 480px) length` This says if viewport is 480px or smaller a particular sized image will need to be used.

The media feature is followed by a colon `:`. After the colon is the second part of `sizes` list item, which is length.

`(max-width: 480px) 100vw` This says if the viewport is 480px or smaller the image should take up 100% of the viewport.

Here is a complete code snippet:

```
<img src="doggos_640.jpg"
  alt="image of a dog"
  srcset="doggo_480.jpg 480w,
          doggo_960.jpg 960w,
          doggo_1280.jpg 1280w,
          doggo_2400.jpg 2400w"
  sizes="(max-width: 480px) 100vw,
         (max-width: 960px) 75vw,
         240px" />

```

Let's break this down, we already covered the first item in the `sizes` list. The second item says, if the viewport is wider than 480px but not wider than 960px image takes up 75% if the viewport. If the viewport is larger than 960px and doesn't meet any of prior media conditions the image gets sized to 240px.

# Summary of Resolution Switching

Resolution switching is all about delivering the most appropriate image sized based on device's resolution and pixel density, which ensures high resolution devices like retina displays get high quality images while lower resolution devices receive smaller, more bandwidth-efficient
images.

We always use the `<img>` element with the `srcset` attribute when resolution switching. Additionally we may also add the `sizes` attribute, depending on if we are targeting screen resolution or image width.

## Targeting Screen Resolution

When targeting a screen's resolution, we use
x-descriptors. The browser selects an image based on the device's pixel density, ensuring higher resolution images are loaded for high-density screens, so the `sizes` attribute is not needed.

- Target: Device pixel density (screen resolution).

- Purpose: Used when you want to provide images optimized for different screen resolutions, such as Retina displays.

- Sizes Attribute: Not used with x descriptors because the decision is based on pixel density, not the size of the viewport or layout. The srcset attribute alone suffices as it allows the browser to choose the right image based on the device's screen resolution.

Example with x-descriptors:

```
<img src="default.jpg"
  alt="image description"
  srcset="image1.jpg 1x,
          image2.jpg 2x,
          image3.jpg 3x" />
```

In the code snippet above, the browser selects an image based on the device's pixel density, ensuring higher resolution images are loaded for high-density screens without needing sizes.

## Targeting Viewport

When targeting the viewport we use w-descriptors, which use the `sizes` attribute to inform the browser about the layout space the image will occupy, optimizing image selection for different viewport widths.

- Target: Viewport width.

- Purpose: Used when you want the browser to select an image based on the width of the viewport.

- Sizes Attribute: Essential because it provides the browser with information about how much space the image will take up in the layout. This helps the browser make a more informed decision about which image to download, improving performance and ensuring the right image is chosen for different screen sizes and layouts.

Example with w-descriptors:

```
<img src="doggos_640.jpg"
  alt="image of a dog"
  srcset="doggo_480.jpg 480w,
          doggo_960.jpg 960w,
          doggo_1280.jpg 1280w,
          doggo_2400.jpg 2400w"
  sizes="(max-width: 480px) 100vw,
         (max-width: 960px) 75vw,
         240px" />
```

In the code snippet above the `sizes` attribute tells the browser how wide the image should be displayed based on the viewport width, allowing it to select the most appropriate image from the `srcset`.

| x-descriptor                                                                                                                                 | w-descriptor                                                                                                                                            |
| -------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Focus on screen resolution, allowing the browser to choose an appropriate image based solely on pixel density without layout considerations. | Use the `sizes` attribute to inform the browser about the layout space the image will occupy, optimizing image selection for different viewport widths. |

---

## Art Direction

We have learned about image selection based on screen resolution (x-descriptor) and viewport width (w-descriptor). In both cases, the content of the image stays the same with changes in size.

Sometimes we need to alter the image, cropping a larger image to zoom in on important details for a smaller display, removing text that is too small to reade, or providing a landscape and portrait version of an image. This is art direction, altering an image to best suit an environment. We use the `<picture>` element with art direction.

### Picture Element

There are some important principles to remember about the `<picture>` element.

- It has no attributes - essentially it is a wrapper for a number of `<source>` elements and one `<img>` element.

- The `<img>` element is required as the last element in the list. Without it no image will display.

#### Syntax of Picture Element

The `<picture>` element is a container used to specify multiple `<source>` elements for different scenarios, along with a default `<img>` element.

1. `<source>` element: Used to specify different images or media resources based on various conditions. Each `<source>` element can have the following attributes:

- `media`: Defines a media query to apply the srcset conditionally. This is useful for specifying different images for different screen sizes, orientations, resolutions, etc.
- `srcset`: Provides the URL of the image to use when the media condition is met.

`<img>`: is a fallback image that is displayed if none of the `<source>` elements' conditions are met. It is also the `<img>` element that places the image on the page, so don't forget it. (`<img>` always takes a `src` and `alt` attribute).

When the browser selects the image the URL provided in `srcset` gets passed to `src` attribute of the `<img>` element.
Let's take a look at a code snippet and break it down:

```
 <picture>
        <source media="(min-width: 1024px)" srcset="large-image.jpg">
        <source media="(min-width: 600px)" srcset="medium-image.jpg">
        <img src="small-image.jpg" alt="sample image">
```

This example instructs the browser that if the viewport is 1024px wide or larger to display large-image.jpg. If the viewport is wider 600px or but smaller than 1024 then display medium-image.jpg. Lastly for viewports smaller than 600px and therefore don't match any of the source's media queries small-image.jpg should be used; this image will also be used for browsers that do not support `<picture>`.
`<picture>`

## Picture Element with Type Attribute

The `<picture>` element can also use the `type` attribute in the `<source>` element to specify different image formats. Remember there are [newer image types like webP and JEPG-XR that arent supported by every browser](#image-formats)This is useful when you want to provide different image formats (like WebP, JPEG, or PNG) ack to the browser, and let the browser choose the most suitable one.

- `type`: Used in the `<source>` element specifies the MIME type of the image. This allows the browser to choose the best image format it supports.

### Code Snippet

Here's an example where we provide different image formats for the browser to choose from:

```
    <picture>
        <!-- WebP format for browsers that support it -->
        <source type="image/webp" srcset="image.webp">

        <!-- JPEG format as a fallback -->
        <source type="image/jpeg" srcset="image.jpg">

        <!-- Default image if none of the above formats are supported -->
        <img src="image.jpg" alt="Sample Image">
    </picture>
```

#### Breakdown of Code Snippet

1. `<picture>`: acts as a container for different image sources.

2. First <source> element:

- `type="image/webp"`: Specifies that this source is a WebP image.

- `srcset="image.webp"`: Provides the URL of the WebP image.

3. Second <source> element:

- `type="image/jpeg"`: Specifies that this source is a JPEG image.

- `srcset="image.jpg"`: Provides the URL of the JPEG image.

4. <img> element:

`src="image.jpg"`: Provides the default image (in JPEG format) to be used if none of the `<source>` elements' formats are supported.

`alt="Sample Image"`: Provides alt text for the image for accessibility.

Key Points

- The `<picture>` element allows you to define multiple image sources.

- The `type` attribute in the `<source>` element specifies the format of the image (e.g., WebP, JPEG).

- The browser will choose the first supported format and ignore the rest.

- The `<img>` element acts as a fallback, ensuring that an image is displayed even if none of the specified formats are supported.

---

## Helpful Info

- [If you want to check browser support for HTML or CSS features](https://caniuse.com/)

#### Caching + Images

When a browser downloads an image it stores the file on the disk cache temporarily. So when the browser needs to display the image again it can pull from the local copy instead of making a new server request.
